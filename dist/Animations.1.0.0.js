class t{constructor(t,e={}){this.attributeToAnimateName=t.attributeToAnimateName,this.fromSecond=t.fromSecond,this.toSecond=t.toSecond,this.readOnlyElementAttrNames=t.readOnlyElementAttrNames,this.argsForAlgo=e,this.fps=60,this.state={}}animate(t,e,r={}){return!0}}class e extends t{constructor(t,e={}){super(t,e)}animate(t,e,r={}){const a=e/1e3;if(a<this.fromSecond||a>this.toSecond)return t;const s=this.deltaPerMilli()*this.currentTimeDifferenceInMilli(e)+this.argsForAlgo.from;return Number(s)}deltaPerMilli(){const t=1e3*(this.toSecond-this.fromSecond);return(this.argsForAlgo.to-this.argsForAlgo.from)/t}currentTimeDifferenceInMilli(t){const e=1e3*this.fromSecond;return Math.abs(Number(t-e))}}class r extends t{constructor(t,e={}){super(t,e),this.state.previous=0}animate(t,e,r={}){return 0==this.state.previous&&(this.state.previous=Date.now()),this.argsForAlgo.timeGap,this.argsForAlgo.deviation,this.manipulate(t)}isWaitOver(){return Math.abs(Date.now()-this.state.previous)>this.argsForAlgo.timeGap}manipulate(t){const e=t-this.argsForAlgo.deviation,r=t+this.argsForAlgo.deviation;return Math.abs(Math.random()*(r-e+1)+e)}}class a extends t{constructor(t,e={}){super(t,e)}animate(t,e,r={}){return(()=>{let t="#";for(var e=0;e<6;e++)t+="0123456789ABCDEF"[Math.floor(16*Math.random())];return t})()}}class s{constructor(){this.data=[]}add(t={}){return this.data.push(t),t}isUnique(t){if(void 0===t)return!1;let e=!0;for(let r=0;r<this.data.length;r++){this.data[r].name===t&&(e=!1)}return e}get length(){return this.data.length}getItem(t){for(let e=0;e<this.data.length;e++)if(this.data[e].name===t)return this.data[e];return!1}getProperty(t,e="value"){for(let r=0;r<this.data.length;r++)if(this.data[r].name===t)return this.data[r][e];return!1}getAttr(t,e="value"){return Number(this.getProperty(t))}setProperty(t,e,r="value"){for(let a=0;a<this.data.length;a++)if(this.data[a].name===t)return this.data[a][r]=e,this.data[a][r];return!0}setAttr(t,e,r="value"){return Number(this.setProperty(t,e))}getAllByNames(t=[]){const e=[];return this.data.forEach((r=>{t.forEach((t=>{t==r.name&&e.push(r)}))})),e}insertPropertiesFromArray(t){return this.data.forEach((e=>{t.forEach((t=>{t.name==e.name&&(e.value=t.value)}))})),!0}setAllProperties(t,e){}getItemsByNames(t=[]){const e=[];return this.data.forEach((r=>{t.forEach((t=>{t==r.name&&e.push(r)}))})),e}}export default class{constructor(){this.data=new s}addLinear(t,r,a,s,n,o=[]){const i=new e({attributeToAnimateName:t,fromSecond:r,toSecond:a,readOnlyElementAttrNames:o},{from:s,to:n});return this.data.add(i),i}addVibrate(t,e,a,s,n,o=[]){const i=new r({attributeToAnimateName:t,fromSecond:e,toSecond:a,readOnlyElementAttrNames:o},{timeGap:s,deviation:n});return this.data.add(i),i}addRandomColors(t,e,r,s=[]){const n=new a({attributeToAnimateName:t,fromSecond:e,toSecond:r,readOnlyElementAttrNames:s},{});return this.data.add(n),n}}
